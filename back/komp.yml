apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: adminer
      name: adminer
    spec:
      ports:
        - name: "8080"
          port: 8080
          targetPort: 8080
      selector:
        io.kompose.service: adminer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx
      name: nginx
    spec:
      ports:
        - name: "4000"
          port: 4000
          targetPort: 80
      selector:
        io.kompose.service: nginx
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: php
      name: php
    spec:
      ports:
        - name: "9000"
          port: 9000
          targetPort: 9000
      selector:
        io.kompose.service: php
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      ports:
        - name: "5432"
          port: 5432
          targetPort: 5432
      selector:
        io.kompose.service: postgres
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: adminer
      name: adminer
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: adminer
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.network/db-net: "true"
            io.kompose.service: adminer
        spec:
          containers:
            - image: adminer
              name: adminer-kub8
              ports:
                - containerPort: 8080
              resources: {}
          hostname: adminer-kub8
          restartPolicy: Always
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: db-net
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/db-net: "true"
      podSelector:
        matchLabels:
          io.kompose.network/db-net: "true"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx
      name: nginx
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: nginx
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.network/php-net: "true"
            io.kompose.service: nginx
        spec:
          containers:
            - image: nginx
              name: nginx-kub8
              ports:
                - containerPort: 80
              resources: {}
          hostname: nginx-kub8
          restartPolicy: Always
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: php-net
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/php-net: "true"
      podSelector:
        matchLabels:
          io.kompose.network/php-net: "true"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: php
      name: php
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: php
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.network/db-net: "true"
            io.kompose.network/php-net: "true"
            io.kompose.service: php
        spec:
          containers:
            - image: php
              name: php-kub8
              ports:
                - containerPort: 9000
              resources: {}
          hostname: php-kub8
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: postgres
      name: postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: postgres
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.production.yml -o komp
            kompose.version: 1.22.0 (HEAD)
          creationTimestamp: null
          labels:
            io.kompose.network/db-net: "true"
            io.kompose.service: postgres
        spec:
          containers:
            - env:
                - name: POSTGRES_DB
                  value: kub8
                - name: POSTGRES_PASSWORD
                  value: dev
                - name: POSTGRES_USER
                  value: dev
              image: postgres:13
              name: postgres-kub8
              ports:
                - containerPort: 5432
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: postgres-claim0
          hostname: postgres-kub8
          restartPolicy: Always
          volumes:
            - name: postgres-claim0
              persistentVolumeClaim:
                claimName: postgres-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: postgres-claim0
      name: postgres-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      selector:
        matchLabels:
          release: "test"
    status: {}
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: pv0003
    spec:
      capacity:
      storage: 50Mi
      volumeMode: Filesystem
      accessModes:
        - ReadWriteOnce
      selector:
        release: "test" 


